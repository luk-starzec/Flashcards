@inject ILanguageService languageService;

<div class="select-course__wrapper">

    @if (sortedCourses is not null)
    {
        <ul class="select-course__list">

            @foreach (var course in sortedCourses)
            {
                <li class="select-course__list-item">

                    <button class="@GetButtonCss(course)" @onclick="()=>HandleCourseClick(course)">

                        <SvgIcon SvgUrl="@GetButtonIcon(course)" />

                        <span>@GetTitle(course)</span>

                    </button>

                </li>
            }

        </ul>
    }

</div>

@code {
    [Parameter] public List<CourseViewModel>? Courses { get; set; }
    [Parameter] public EventCallback<CourseViewModel> OnCourseActivate { get; set; }
    [Parameter] public EventCallback<CourseViewModel> OnCourseDownload { get; set; }

    IEnumerable<CourseViewModel>? sortedCourses => Courses?.OrderByDescending(x => x.IsDownloaded)
        .ThenBy(x => x.Titles.ContainsKey(language) ? x.Titles[language] : x.Titles[LanguageEnum.English]);

    LanguageEnum language;

    string GetButtonCss(CourseViewModel course)
        => course.IsDownloaded
            ? $"select-course__button {(course.IsActive ? "select-course__button--active" : "")}"
            : "select-course__button select-course__button--download";

    string GetButtonIcon(CourseViewModel course)
        => course.IsActive
            ? "/assets/radio-checked-ico.svg"
            : course.IsDownloaded ? "/assets/radio-blank-ico.svg" : "/assets/download-ico.svg";

    string GetTitle(CourseViewModel course) => course.Titles.ContainsKey(language)
        ? course.Titles[language]
        : course.Titles[LanguageEnum.English];

    protected override async Task OnInitializedAsync()
    {
        language = await languageService.GetLanguageAsync();
    }

    async Task HandleCourseClick(CourseViewModel course)
    {
        if (course.IsDownloaded)
            await ActivateCourse(course);
        else
            await DownloadCourse(course);
    }

    async Task ActivateCourse(CourseViewModel course)
    {
        if (!course.IsActive)
            await OnCourseActivate.InvokeAsync(course);
    }

    async Task DownloadCourse(CourseViewModel course)
    {
        await OnCourseDownload.InvokeAsync(course);
    }
}
