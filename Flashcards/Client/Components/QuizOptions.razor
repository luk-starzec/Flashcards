@inject IStringLocalizer<Resource> localizer

<div class="quiz-options__wrapper">

    <section class="quiz-options__section">

        @foreach (QuizModeEnum e in Enum.GetValues(typeof(QuizModeEnum)))
        {
            var mode = e;
            <button class="@GetModeCss(mode)" @onclick="()=>HandleModeClick(mode)">
                <SvgIcon SvgUrl="@GetModeIcon(mode)" />
                <span>@GetModeText(mode)</span>
            </button>

        }
    </section>

    <section class="quiz-options__section quiz-options__section--cards">

        <span>@localizer["Res_HowManyCards"]</span>

        @foreach (var count in cardCountList)
        {
            int c = count;
            <button class="@GetCardsButtonCss(c)" @onclick="()=>HandleCardCountClick(c)">
                @c
            </button>
        }

    </section>

    <section class="quiz-options__section">

        <button class="quiz-options__checkbox" @onclick="HandleOnlyLearnedClick">
            <SvgIcon SvgUrl="@iconOnlyLearned" />
            <span>@localizer["Res_UseOnlyLearned"]</span>
        </button>

    </section>

    <section class="quiz-options__section">

        <span class="quiz-options__exclude-header">
            @localizer["Res_ExcludeFromQuiz"]
        </span>

        <SymbolsList Symbols="@toggleableSymbols" OnSymbolEnableChanged="HandleSymbolEnableChanged" ShowSelectAll="true" ShowSelectRow="true" />

    </section>


</div>


@code {
    [Parameter] public QuizOptionsViewModel Options { get; set; }
    [Parameter] public List<SymbolViewModel> Symbols { get; set; }
    [Parameter] public EventCallback<SymbolViewModel[]> OnSymbolQuizExcludedChanged { get; set; }
    [Parameter] public EventCallback<QuizOptionsViewModel> OnOptionsChanged { get; set; }

    List<ToggleableSymbolViewModel> toggleableSymbols => SymbolConverter.QuizToToggleableSymbol(Symbols);

    List<int> cardCountList = new() { 5, 10, 15 };

    string GetCardsButtonCss(int count)
    {
        return Options?.CardCount == count
            ? "quiz-options__button quiz-options__button--active"
            : "quiz-options__button";
    }

    string GetModeCss(QuizModeEnum mode)
    {
        return Options?.QuizMode == mode
            ? "quiz-options__checkbox quiz-options__checkbox--active"
            : "quiz-options__checkbox";
    }

    string GetModeIcon(QuizModeEnum mode)
    {
        return Options?.QuizMode == mode
            ? "/assets/radio-checked-ico.svg"
            : "/assets/radio-blank-ico.svg";
    }

    string GetModeText(QuizModeEnum mode)
    {
        var symbol = Symbols.First();

        switch (mode)
        {
            case QuizModeEnum.Both:
                return $"{symbol.Translate} 🠖 {symbol.Original}, {symbol.Original} 🠖 {symbol.Translate}";
            case QuizModeEnum.TranslateToOriginal:
                return $"{symbol.Translate} 🠖 {symbol.Original}";
            case QuizModeEnum.OriginalToTranslate:
                return $"{symbol.Original} 🠖 {symbol.Translate}";
            default:
                return string.Empty;
        }
    }

    string iconOnlyLearned => Options.OnlyLearned
        ? "/assets/check-checked-ico.svg"
        : "/assets/check-blank-ico.svg";

    async Task HandleSymbolEnableChanged(ToggleableSymbolViewModel[] symbols)
    {
        var s = Symbols.Where(r => symbols.Any(rr => rr.Original == r.Original)).ToArray();
        await OnSymbolQuizExcludedChanged.InvokeAsync(s);
    }

    async Task HandleCardCountClick(int count)
    {
        Options.CardCount = count;
        await OnOptionsChanged.InvokeAsync(Options);
    }

    async Task HandleModeClick(QuizModeEnum mode)
    {
        Options.QuizMode = mode;
        await OnOptionsChanged.InvokeAsync(Options);
    }

    async Task HandleOnlyLearnedClick()
    {
        Options.OnlyLearned = !Options.OnlyLearned;
        await OnOptionsChanged.InvokeAsync(Options);
    }
}

