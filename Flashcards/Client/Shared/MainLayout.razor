@inherits LayoutComponentBase
@implements IDisposable
@inject IThemeService themeService;

<div class="@cssWrapper">

    @if (themeLoaded)
    {
        <main>
            <CascadingValue Value="@loaderHelper">

                @Body

                @if (loaderHelper.IsLoaderVisible)
                {
                    <Loader />
                }
            </CascadingValue>
        </main>
    }
    else
    {
        <SplashScreen />
    }

</div>

@code {
    LoaderHelper loaderHelper;
    bool themeLoaded;

    string cssWrapper => themeLoaded ? "layout__wrapper" : "layout__wrapper layout__wrapper--hidden";

    protected override async Task OnInitializedAsync()
    {
        loaderHelper = new LoaderHelper();
        loaderHelper.VisibilityChanged += LoaderVisibilityChanged;

        await themeService.RestoreThemeAsync();
        themeLoaded = true;
    }

    public void Dispose()
    {
        loaderHelper.VisibilityChanged -= LoaderVisibilityChanged;
    }

    void LoaderVisibilityChanged()
    {
        StateHasChanged();
    }
}