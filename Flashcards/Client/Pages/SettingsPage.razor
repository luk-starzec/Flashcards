@page "/settings"
@inject ICourseService courseService
@inject IQuizService quizService
@inject ILanguageService languageService;
@inject IThemeService themeService;
@inject IDataService dataService;
@inject IExportService exportService;
@inject NavigationManager navigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["Res_Settings"]</PageTitle>

<div class="settings-page__wrapper">

    <div class="settings-page__header">

        <h3>
            @localizer["Res_Settings"]
        </h3>

        <button class="settings-page__close-button" @onclick="HandleCloseClick">
            <SvgIcon SvgUrl="assets/close-ico.svg" />
        </button>

    </div>

    <ul class="settings-page__list">

        <li class="settings-page__list-item">

            <button class="@GetSectionCss(OptionsPageSectionEnum.SelectCourse)"
                    @onclick="()=>SectionClick(OptionsPageSectionEnum.SelectCourse)">

                <SvgIcon SvgUrl="/assets/next-ico.svg" />

                <span>@localizer["Res_SelectCourse"]</span>

            </button>

            @if (IsSectionVisible(OptionsPageSectionEnum.SelectCourse))
            {
                <SelectCourse Courses="@courses" OnCourseActivate="HandleCourseActivate" OnCourseDownload="HandleCourseDownload"
                          OnCourseUpdate="HandleCourseUpdate" />
            }
        </li>

        <li class="settings-page__list-item">

            <button class="@GetSectionCss(OptionsPageSectionEnum.LearnOptions)" disabled="@noActiveCourse"
                    @onclick="()=>SectionClick(OptionsPageSectionEnum.LearnOptions)">

                <SvgIcon SvgUrl="/assets/next-ico.svg" />

                <span>@localizer["Res_LearnOptions"]</span>

            </button>

            @if (IsSectionVisible(OptionsPageSectionEnum.LearnOptions))
            {
                <LearnOptions Symbols="@symbols" OnSymbolLearnedChanged="HandleSymbolLearnedChanged" />
            }
        </li>

        <li class="settings-page__list-item">

            <button class="@GetSectionCss(OptionsPageSectionEnum.QuizOptions)" disabled="@noActiveCourse"
                    @onclick="()=>SectionClick(OptionsPageSectionEnum.QuizOptions)">

                <SvgIcon SvgUrl="/assets/next-ico.svg" />

                <span>@localizer["Res_QuizOptions"]</span>

            </button>

            @if (IsSectionVisible(OptionsPageSectionEnum.QuizOptions) && symbols is not null && quizOptions is not null)
            {
                <QuizOptions Options="@quizOptions" Symbols="@symbols"
                         OnSymbolQuizExcludedChanged="HandleSymbolQuizExcludedChanged" OnOptionsChanged="HandleQuizOptionsChanged" />
            }
        </li>

        <li class="settings-page__list-item">

            <button class="@GetSectionCss(OptionsPageSectionEnum.ThemeOptions)"
                    @onclick="()=>SectionClick(OptionsPageSectionEnum.ThemeOptions)">

                <SvgIcon SvgUrl="/assets/next-ico.svg" />

                <span>@localizer["Res_Colors"]</span>

            </button>

            @if (IsSectionVisible(OptionsPageSectionEnum.ThemeOptions) && currentTheme is not null)
            {
                <ThemeOptions Theme="@currentTheme" OnThemeChanged="HandleThemeChanged" />
            }
        </li>

        <li class="settings-page__list-item">

            <button class="@GetSectionCss(OptionsPageSectionEnum.Language)"
                    @onclick="()=>SectionClick(OptionsPageSectionEnum.Language)">

                <SvgIcon SvgUrl="/assets/next-ico.svg" />

                <span>@localizer["Res_Language"]</span>

            </button>

            @if (IsSectionVisible(OptionsPageSectionEnum.Language) && languages is not null)
            {
                <SelectLanguage Language="@currentLanguage" Languages="@languages" OnLanguageSelected="HandleLanguageSelected" />
            }
        </li>

        <li class="settings-page__list-item">

            <button class="@GetSectionCss(OptionsPageSectionEnum.Data)"
                    @onclick="()=>SectionClick(OptionsPageSectionEnum.Data)">

                <SvgIcon SvgUrl="/assets/next-ico.svg" />

                <span>@localizer["Res_Data"]</span>

            </button>

            @if (IsSectionVisible(OptionsPageSectionEnum.Data))
            {
                <DataOptions OnRestoreDefaults="()=>restoreDafaultsDialogVisible=true"
                         OnExport="HandleExportData" OnImport="ShowImportDataDialog" />
            }
        </li>

    </ul>

</div>

@if (restoreDafaultsDialogVisible)
{
    <ConfirmDialog OnConfirm="HandleRestoreDefaults" OnCancel="()=>restoreDafaultsDialogVisible=false"
               Message="@localizer["Res_RestoreDefaultsMessage"]" Cancel="@localizer["Res_No"]" Confirm="@localizer["Res_Yes"]" />
}


@if (importDataDialogVisible)
{
    <ConfirmDialog OnConfirm="HandleImportData" OnCancel="HideImportDataDialog"
               Message="@localizer["Res_ImportDataMessage"]" Cancel="@localizer["Res_No"]" Confirm="@localizer["Res_Yes"]" />
}


@code {
    [CascadingParameter] LoaderHelper loaderHelper { get; set; }

    List<CourseViewModel>? courses;
    List<SymbolViewModel>? symbols;
    QuizOptionsViewModel? quizOptions;
    List<LanguageEnum>? languages;
    ThemeViewModel? currentTheme;
    LanguageEnum currentLanguage;

    bool noActiveCourse => ActiveCourse is null;

    CourseViewModel? ActiveCourse => courses?.FirstOrDefault(r => r.IsActive);

    bool importDataDialogVisible;
    bool restoreDafaultsDialogVisible;

    string? importDataContent;

    OptionsPageSectionEnum currentSection;

    bool IsSectionVisible(OptionsPageSectionEnum section) => section == currentSection;

    string GetSectionCss(OptionsPageSectionEnum section)
        => $"settings-page__section-header {(currentSection == section ? "settings-page__section-header--active" : "")}";

    protected override async Task OnInitializedAsync()
    {
        loaderHelper.ShowLoader(true);

        var course = await courseService.GetActiveCourseAsync();
        if (course is not null)
            courses = new List<CourseViewModel> { course };

        loaderHelper.HideLoader();
    }

    async Task SectionClick(OptionsPageSectionEnum section)
    {
        if (currentSection == section)
        {
            currentSection = OptionsPageSectionEnum.None;
            return;
        }

        switch (section)
        {
            case OptionsPageSectionEnum.SelectCourse:
                await LoadCourses();
                break;
            case OptionsPageSectionEnum.LearnOptions:
                await LoadSymbols();
                break;
            case OptionsPageSectionEnum.QuizOptions:
                await LoadSymbols();
                await LoadQuizSettings();
                break;
            case OptionsPageSectionEnum.ThemeOptions:
                await LoadTheme();
                break;
            case OptionsPageSectionEnum.Language:
                await LoadLanguage();
                break;
            case OptionsPageSectionEnum.Data:
                break;
        }
        currentSection = section;
    }

    async Task LoadCourses()
    {
        loaderHelper.ShowLoader();

        courses = await courseService.GetCoursesAsync();

        loaderHelper.HideLoader();
    }

    async Task LoadSymbols()
    {
        loaderHelper.ShowLoader();

        var active = ActiveCourse;
        if (active is null)
            return;

        symbols = await courseService.GetSymbolsAsync(active.Name);

        loaderHelper.HideLoader();
    }

    async Task LoadQuizSettings()
    {
        loaderHelper.ShowLoader();

        quizOptions = await quizService.GetOptionsAsync();

        loaderHelper.HideLoader();
    }

    async Task LoadTheme()
    {
        loaderHelper.ShowLoader();

        currentTheme = await themeService.GetThemeAsync();

        loaderHelper.HideLoader();
    }

    async Task LoadLanguage()
    {
        loaderHelper.ShowLoader();

        languages = languageService.GetLanguages();
        currentLanguage = await languageService.GetLanguageAsync();

        loaderHelper.HideLoader();
    }

    async Task HandleCourseDownload(CourseViewModel course)
    {
        loaderHelper.ShowLoader();

        await courseService.DownloadCourseAsync(course.Name);

        course.IsDownloaded = true;

        if (ActiveCourse is null)
            await HandleCourseActivate(course);

        loaderHelper.HideLoader();
    }

    async Task HandleCourseUpdate(CourseViewModel course)
    {
        loaderHelper.ShowLoader();

        var updated = await courseService.UpdateCourseAsync(course.Name);
        courses.Remove(course);
        courses.Add(updated);

        loaderHelper.HideLoader();

    }

    async Task HandleCourseActivate(CourseViewModel course)
    {
        loaderHelper.ShowLoader();

        await courseService.SetActiveCourseAsync(course.Name);

        var active = ActiveCourse;
        if (active is not null)
            active.IsActive = false;

        course.IsActive = true;

        loaderHelper.HideLoader();
    }

    async Task HandleSymbolQuizExcludedChanged(SymbolViewModel[] symbols)
    {
        loaderHelper.ShowLoader();

        var courseName = ActiveCourse?.Name ?? string.Empty;
        var excluded = !symbols.First().QuizExcluded;
        var originals = symbols.Select(r => r.Original).ToArray();

        await courseService.SetSymbolQuizExcludedAsync(courseName, originals, excluded);

        foreach (var symbol in symbols)
            symbol.QuizExcluded = excluded;

        loaderHelper.HideLoader();
    }

    async Task HandleSymbolLearnedChanged(SymbolViewModel[] symbols)
    {
        loaderHelper.ShowLoader();

        var courseName = ActiveCourse?.Name ?? string.Empty;
        var learned = !symbols.First().Learned;
        var originals = symbols.Select(r => r.Original).ToArray();

        await courseService.SetSymbolLearnedAsync(courseName, originals, learned);

        foreach (var symbol in symbols)
            symbol.Learned = learned;

        loaderHelper.HideLoader();
    }

    async Task HandleQuizOptionsChanged(QuizOptionsViewModel quizOptions)
    {
        loaderHelper.ShowLoader();

        await quizService.SetOptionsAsync(quizOptions);

        loaderHelper.HideLoader();
    }

    async Task HandleThemeChanged(ThemeViewModel theme)
    {
        loaderHelper.ShowLoader();

        await themeService.SetThemeAsync(theme);
        currentTheme = theme;

        loaderHelper.HideLoader();
    }

    async Task HandleLanguageSelected(LanguageEnum language)
    {
        loaderHelper.ShowLoader();

        await languageService.SetLanguageAsync(language);
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

    async Task HandleRestoreDefaults()
    {
        loaderHelper.ShowLoader();

        await dataService.ClearDatabaseAsync();
        await dataService.ClearSettingsAsync();

        loaderHelper.HideLoader();
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }

    async Task HandleExportData()
    {
        loaderHelper.ShowLoader();

        await exportService.ExportDataAsync();

        loaderHelper.HideLoader();
    }

    void ShowImportDataDialog(string fileContent)
    {
        importDataContent = fileContent;
        importDataDialogVisible = true;
    }

    void HideImportDataDialog()
    {
        importDataContent = null;
        importDataDialogVisible = false;
    }

    async Task HandleImportData()
    {
        loaderHelper.ShowLoader();

        await exportService.ImportDataAsync(importDataContent);
        HideImportDataDialog();

        loaderHelper.HideLoader();
    }

    void HandleCloseClick()
    {
        navigationManager.NavigateTo("/");
    }
}
