@page "/"
@inject IStringLocalizer<Resource> localizer
@inject IThemeService themeService;

<PageTitle>@localizer["Res_MainPage"]</PageTitle>

<div class="index-page__wrapper">

    <dic class="index-page__logo">
        <SvgIcon SvgUrl="/assets/logo.svg" />
    </dic>

    <button class="@cssTheme" @onclick="ThemeToggleClick">
        <SvgIcon SvgUrl="@iconTheme" />
    </button>

    <a href="/learn" class="index-page__button index-page__button--learn">
        @localizer["Res_Learn"]
    </a>

    <a href="/quiz" class="index-page__button index-page__button--quiz">
        @localizer["Res_Quiz"]
    </a>

    <a href="/settings" class="index-page__button index-page__button--settings">
        @localizer["Res_Settings"]
    </a>

</div>

@code {
    [CascadingParameter] LoaderHelper LoaderHelper { get; set; }

    bool darkMode;

    string cssTheme => darkMode ? "index-page__theme-toggle index-page__theme-toggle--dark" : "index-page__theme-toggle";
    string iconTheme => darkMode ? "/assets/sun-ico.svg" : "/assets/moon-ico.svg";

    protected override async Task OnInitializedAsync()
    {
        darkMode = await themeService.IsDarkMode();
    }

    async Task ThemeToggleClick()
    {
        await themeService.SetThemeAsync(!darkMode);
        darkMode = !darkMode;
    }

}