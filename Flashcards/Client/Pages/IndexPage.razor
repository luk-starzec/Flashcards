@page "/"
@inject IStringLocalizer<Resource> localizer
@inject IThemeService themeService;
@inject ICourseService courseService;
@inject IQuizService quizService;

<PageTitle>@localizer["Res_MainPage"]</PageTitle>

<div class="index-page__wrapper">

    <dic class="index-page__logo">
        <SvgIcon SvgUrl="/assets/logo.svg" />
    </dic>

    <button class="@cssTheme" @onclick="ThemeToggleClick">
        <SvgIcon SvgUrl="@iconTheme" />
    </button>

    @if (learnAvailable)
    {
        <a href="/learn" class="index-page__button index-page__button--learn">
            @localizer["Res_Learn"]
        </a>
    }
    else
    {
        <button class="index-page__button index-page__button--unavailable index-page__button--learn"
            @onclick="()=>learnInfoVisible=true">

            <SvgIcon SvgUrl="/assets/info-ico.svg" />
            @localizer["Res_Learn"]

        </button>
    }

    @if (quizAvailable)
    {
        <a href="/quiz" class="index-page__button index-page__button--quiz">
            @localizer["Res_Quiz"]
        </a>
    }
    else
    {
        <button class="index-page__button index-page__button--unavailable index-page__button--quiz"
            @onclick="()=>quizInfoVisible=true">

            <SvgIcon SvgUrl="/assets/info-ico.svg" />
            @localizer["Res_Quiz"]

        </button>
    }

    @if (learnAvailable)
    {
        <a href="/list" class="index-page__button index-page__button--list">
            @localizer["Res_List"]
        </a>
    }
    else
    {
        <button class="index-page__button index-page__button--unavailable index-page__button--list"
            @onclick="()=>listInfoVisible=true">

            <SvgIcon SvgUrl="/assets/info-ico.svg" />
            @localizer["Res_List"]

        </button>
    }

    @if (continueQuizAvailable)
    {
        <a href=@($"/quiz/{lastUnfinishedQuizId}") class="index-page__button index-page__button--continue-quiz">
            @localizer["Res_ContinueQuiz"]
        </a>
    }

    <a href="/settings" class="index-page__button index-page__button--settings">
        @localizer["Res_Settings"]
    </a>

</div>

@if (learnInfoVisible)
{
    <InfoDialog Message="@localizer["Res_LearnUnavailableInfo"]" OnClose="()=>learnInfoVisible=false" />
}

@if (listInfoVisible)
{
    <InfoDialog Message="@localizer["Res_ListUnavailableInfo"]" OnClose="()=>listInfoVisible=false" />
}

@if (quizInfoVisible)
{
    <InfoDialog Message="@localizer["Res_QuizUnavailableInfo"]" OnClose="()=>quizInfoVisible=false" />
}

@code {
    [CascadingParameter] LoaderHelper loaderHelper { get; set; }

    bool learnAvailable = true;
    bool quizAvailable = true;
    bool continueQuizAvailable => lastUnfinishedQuizId is not null && quizAvailable;

    bool learnInfoVisible;
    bool quizInfoVisible;
    bool listInfoVisible;

    string? lastUnfinishedQuizId;

    bool darkMode;

    string cssTheme => darkMode ? "index-page__theme-toggle index-page__theme-toggle--dark" : "index-page__theme-toggle";
    string iconTheme => darkMode ? "/assets/sun-ico.svg" : "/assets/moon-ico.svg";

    protected override async Task OnInitializedAsync()
    {
        loaderHelper?.ShowLoader();

        darkMode = await themeService.IsDarkMode();

        var activeCourse = await courseService.GetActiveCourseAsync();
        learnAvailable = activeCourse is not null;

        quizAvailable = await quizService.IsQuizAvailableAsync();

        lastUnfinishedQuizId = activeCourse is not null ? await quizService.GetLastUnfinishedIdAsync(activeCourse.Name) : null;

        loaderHelper?.HideLoader();
    }

    async Task ThemeToggleClick()
    {
        await themeService.SetThemeAsync(!darkMode);
        darkMode = !darkMode;
    }
}