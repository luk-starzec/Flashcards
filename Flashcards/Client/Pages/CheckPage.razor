@page "/check"
@inject ICheckService checkService
@inject NavigationManager NavigationManager

<PageTitle>Check</PageTitle>

<div class="check-page__wrapper">

    <div class="check-page__progress">

        <CheckProgress Value="@(index+1)" MaxValue="@cards.Count" />

    </div>

    <div class="check-page__question">
        @question
    </div>

    <CardCheck Answer="@answer" IsOriginal="@card.CheckOriginal" @bind-AnswerVisible="answerVisble" />

    @if (answerVisble)
    {
        <ButtonResult OnClick="HandleBadClick" />
        <ButtonResult Good="true" OnClick="HandleGoodClick" />
    }

</div>

@code {
    CheckSessionViewModel? session;

    protected override async Task OnInitializedAsync()
    {
        session = await checkService.PrepareSessionAsync();
    }

    List<CardCheckViewModel> cards => session?.Cards ?? new();
    int index = 0;
    CardCheckViewModel card => cards[index];

    bool answerVisble;

    string question => card.CheckOriginal ? card.Translate : card.Original;
    string answer => card.CheckOriginal ? card.Original : card.Translate;

    void HandleAnswerClick()
    {
        answerVisble = true;
    }

    async Task HandleGoodClick()
    {
        card.Result = true;
        await ShowNext();
    }

    async Task HandleBadClick()
    {
        card.Result = false;
        await ShowNext();
    }

    async Task ShowNext()
    {
        await checkService.SubmitResultAsync(session.SessionId, card);
        if (index < cards.Count - 1)
        {
            answerVisble = false;
            index++;
        }
        else
        {
            NavigationManager.NavigateTo($"/results/{session.SessionId}");
        }
    }
}
