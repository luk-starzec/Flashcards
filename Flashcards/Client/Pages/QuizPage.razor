@page "/quiz"
@inject IQuizService quizService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["Res_Quiz"]</PageTitle>

<div class="quiz-page__wrapper">

    @if (quiz is not null)
    {
        <div class="quiz-page__progress">

            <QuizProgress Value="@(index+1)" MaxValue="@cards.Count" />

        </div>

        <div class="@cssQuestion">
            @question
        </div>

        <QuizCard Answer="@answer" AnswerOriginal="@(!card.QuestionOriginal)" @bind-AnswerVisible="answerVisble" />

        @if (answerVisble)
        {
            <ButtonResult OnClick="HandleBadClick" />
            <ButtonResult Good="true" OnClick="HandleGoodClick" />
        }
    }

</div>

<button class="quiz-page__close-button" @onclick="HandleCloseClick">
    <SvgIcon SvgUrl="/assets/close-ico.svg" />
</button>

@if (closeDialogVisible)
{
    <ConfirmDialog OnConfirm="HandleCloseConfirm" OnCancel="HandleCloseCancel"
               Message="@localizer["Res_EndThisQuiz"]" Cancel="@localizer["Res_No"]" Confirm="@localizer["Res_Yes"]" />
}

@code {
    [CascadingParameter] LoaderHelper loaderHelper { get; set; }

    QuizViewModel? quiz;

    List<QuizCardViewModel> cards => quiz?.Cards ?? new();
    int index = 0;
    QuizCardViewModel card => cards[index];

    bool answerVisble;
    bool closeDialogVisible;

    string question => card.QuestionOriginal ? card.Original : card.Translate;
    string answer => card.QuestionOriginal ? card.Translate : card.Original;

    string cssQuestion => card?.QuestionOriginal == true
        ? "quiz-page__question quiz-page__question--original"
        : "quiz-page__question";

    protected override async Task OnInitializedAsync()
    {
        loaderHelper.ShowLoader(true);

        quiz = await quizService.PrepareQuizAsync();

        loaderHelper.HideLoader();
    }

    void HandleCloseClick() => closeDialogVisible = true;

    void HandleCloseCancel() => closeDialogVisible = false;

    void HandleCloseConfirm() => NavigationManager.NavigateTo($"/");


    void HandleAnswerClick()
    {
        answerVisble = true;
    }

    async Task HandleGoodClick()
    {
        card.Result = true;
        await ShowNext();
    }

    async Task HandleBadClick()
    {
        card.Result = false;
        await ShowNext();
    }

    async Task ShowNext()
    {
        await quizService.SubmitResultAsync(quiz.QuizId, card);
        if (index < cards.Count - 1)
        {
            answerVisble = false;
            index++;
        }
        else
        {
            NavigationManager.NavigateTo($"/result/{quiz.QuizId}");
        }
    }
}
